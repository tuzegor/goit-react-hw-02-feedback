{"version":3,"sources":["App.js","index.js"],"names":["App","state","good","neutral","bad","countGoodFeedback","setState","prevState","countNeutralFeedback","countBadFeedback","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","className","type","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAGMA,E,4MACJC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,kBAAoB,WAClB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BL,KAAMK,EAAUL,KAAO,O,EAG3BM,qBAAuB,WACrB,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BJ,QAASI,EAAUJ,QAAU,O,EAGjCM,iBAAmB,WACjB,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAC1BH,IAAKG,EAAUH,IAAM,O,EAIzBM,mBAAqB,WACnB,MAA+B,EAAKT,MACpC,OADA,EAAQC,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBO,gCAAkC,WAChC,GAAI,EAAKV,MAAMC,KAAO,EACpB,OAAOU,KAAKC,MAAyB,IAAlB,EAAKZ,MAAMC,KAAc,EAAKQ,uB,4CAIrD,WACE,MAA+BI,KAAKb,MAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,sBAAKW,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,QAAd,mCACA,wBACEA,UAAU,UACVC,KAAK,SACLC,QAASH,KAAKT,kBAHhB,kBAOA,wBACEU,UAAU,aACVC,KAAK,SACLC,QAASH,KAAKN,qBAHhB,qBAOA,wBACEO,UAAU,SACVC,KAAK,SACLC,QAASH,KAAKL,iBAHhB,oBAQF,sBAAKM,UAAU,aAAf,UACE,4CACA,uCAAUb,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWU,KAAKJ,wBAChB,oDAAuBI,KAAKH,kCAA5B,iB,GApEQO,aA2EHlB,ICzEfmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4678fc96.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countGoodFeedback = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n  };\n  countNeutralFeedback = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n  };\n  countBadFeedback = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (this.state.good > 0) {\n      return Math.round((this.state.good * 100) / this.countTotalFeedback());\n    }\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"feedback\">\n          <h2 className=\"title\">Please leave feedback</h2>\n          <button\n            className=\"goodBtn\"\n            type=\"button\"\n            onClick={this.countGoodFeedback}\n          >\n            Good\n          </button>\n          <button\n            className=\"neutralBtn\"\n            type=\"button\"\n            onClick={this.countNeutralFeedback}\n          >\n            Neutral\n          </button>\n          <button\n            className=\"badBtn\"\n            type=\"button\"\n            onClick={this.countBadFeedback}\n          >\n            Bad\n          </button>\n        </div>\n        <div className=\"statistics\">\n          <h2>Statistics</h2>\n          <p>Good: {good}</p>\n          <p>Neutral: {neutral}</p>\n          <p>Bad: {bad}</p>\n          <p>Total: {this.countTotalFeedback()}</p>\n          <p>Positive feedback: {this.countPositiveFeedbackPercentage()}%</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}